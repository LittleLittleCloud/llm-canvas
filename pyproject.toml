[project]
name = "llm-canvas"
version = "0.1.1"
description = "Visualize LLM conversations as a navigable canvas"
authors = [ { name = "LittleLittleCloud" } ]
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
keywords = ["llm", "visualization", "chat", "ai"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Intended Audience :: Developers"
]
dependencies = [
    "anthropic>=0.62.0",
    "fastapi>=0.110.0",
    "openai>=1.99.5",
    "uvicorn[standard]>=0.29.0",
]

[project.urls]
Homepage = "https://github.com/yourname/llm_canvas"

[project.optional-dependencies]
server = ["uvicorn[standard]>=0.29.0"]
dev = ["pytest>=7.0", "black", "ruff", "mypy",]

[project.scripts]
llm-canvas = "llm_canvas.cli:main"

[build-system]
requires = ["hatchling<1.19", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["llm_canvas"]
artifacts = [
    "llm_canvas/static"
]

[tool.hatch.build.targets.wheel.force-include]
"web_ui/dist" = "llm_canvas/static"

[tool.hatch.build.targets.sdist]
include = [
    "llm_canvas/",
    "web_ui/dist/",
    "README.md",
    "LICENSE",
]
exclude = [
    "*.pyc",
    "__pycache__/",
    "web_ui/node_modules/",
]

[tool.hatch.build.targets.sdist.force-include]
"web_ui/dist" = "llm_canvas/static"

[tool.ruff]
line-length = 128
target-version = "py39"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Additionally enable type checking rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "CPY",    # flake8-copyright
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "DJ",     # flake8-django
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]

ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "S101",    # Use of assert detected
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean-typed positional argument in function definition
    "FBT003",  # Boolean positional value in function call
    "COM812",  # Trailing comma missing (handled by formatter)
    "ISC001",  # Implicitly concatenated string literals on one line (handled by formatter)
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link on the line following this TODO
    "FIX002",  # Line contains TODO, consider resolving the issue
    "G004",    # Logging statement uses f-string
    "T201",    # `print` found
    "TRY003",  # Avoid specifying long messages outside the exception class
    "PLR0915",  # too-many-statements
    "TC001",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN", "PLR2004"]  # Allow assert, missing annotations, and magic values in tests
"examples/*" = ["T201", "S101", "ANN"]  # Allow print statements and missing annotations in examples

[tool.ruff.lint.isort]
known-first-party = ["llm_canvas"]

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pytest>=8.4.1",
]
