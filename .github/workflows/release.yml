name: Release

on:
  push:
    tags:
      - "v*.*.*"
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Run tests
        run: uv run pytest

  build-and-publish:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      id-token: write # For trusted publishing to PyPI
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for proper versioning

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web_ui/package-lock.json

      - name: Install frontend dependencies
        working-directory: web_ui
        run: npm ci

      - name: Build frontend
        working-directory: web_ui
        run: npm run build

      - name: Build package
        run: |
          uv run python build.py

      - name: Check build artifacts
        run: |
          ls -la dist/
          uv run python -m twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use trusted publishing (no API token needed)
          # Repository must be configured with PyPI trusted publishing
          verbose: true

  create-github-release:
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web_ui/package-lock.json

      - name: Install frontend dependencies
        working-directory: web_ui
        run: npm ci

      - name: Build frontend
        working-directory: web_ui
        run: npm run build

      - name: Build package
        run: |
          uv run python build.py

      - name: Generate release notes
        id: release_notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          # Generate release notes from git commits since last tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > release_notes.md
            git log --pretty=format:"- %s" $PREV_TAG..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "First release of llm-canvas" >> release_notes.md
          fi

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_notes.outputs.tag_name }}
          name: Release ${{ steps.release_notes.outputs.tag_name }}
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(steps.release_notes.outputs.tag_name, 'rc') || contains(steps.release_notes.outputs.tag_name, 'alpha') || contains(steps.release_notes.outputs.tag_name, 'beta') }}
